basePath: /api/v1.0
definitions:
  model.Account:
    properties:
      accountName:
        type: string
      apiKey:
        type: string
      created:
        type: string
      createdBy:
        type: string
      devices:
        items:
          $ref: '#/definitions/model.Device'
        type: array
      email:
        type: string
      id:
        type: string
      name:
        type: string
      netId:
        type: string
      netName:
        type: string
      networks:
        items:
          $ref: '#/definitions/model.Network'
        type: array
      parent:
        type: string
      picture:
        type: string
      role:
        type: string
      status:
        type: string
      updated:
        type: string
      updatedBy:
        type: string
      vpns:
        items:
          $ref: '#/definitions/model.VPN'
        type: array
    type: object
  model.Device:
    properties:
      accountid:
        type: string
      apiKey:
        type: string
      apiid:
        type: string
      appdata:
        type: string
      arch:
        type: string
      authdomain:
        type: string
      checkInterval:
        type: integer
      clientid:
        type: string
      created:
        type: string
      createdBy:
        type: string
      debug:
        type: boolean
      description:
        type: string
      enable:
        type: boolean
      ezcode:
        type: string
      id:
        type: string
      instanceid:
        type: string
      lastSeen:
        type: string
      name:
        type: string
      os:
        type: string
      platform:
        type: string
      quiet:
        type: boolean
      registered:
        type: boolean
      server:
        type: string
      serviceApiKey:
        type: string
      serviceGroup:
        type: string
      sourceAddress:
        type: string
      tags:
        items:
          type: string
        type: array
      type:
        type: string
      updateKeys:
        type: boolean
      updated:
        type: string
      updatedBy:
        type: string
      version:
        type: string
      vpns:
        items:
          $ref: '#/definitions/model.VPN'
        type: array
    type: object
  model.Limits:
    properties:
      accountid:
        type: string
      created:
        type: string
      createdBy:
        type: string
      devices:
        type: integer
      id:
        type: string
      maxdevices:
        type: integer
      maxmembers:
        type: integer
      maxnetworks:
        type: integer
      maxservices:
        type: integer
      members:
        type: integer
      networks:
        type: integer
      services:
        type: integer
      tolerance:
        type: number
      updated:
        type: string
      updatedBy:
        type: string
    type: object
  model.Message:
    properties:
      config:
        items:
          $ref: '#/definitions/model.VPNConfig'
        type: array
      device:
        $ref: '#/definitions/model.Device'
      id:
        type: string
    type: object
  model.Network:
    properties:
      accountid:
        type: string
      created:
        type: string
      createdBy:
        type: string
      critical:
        type: boolean
      default:
        $ref: '#/definitions/model.Settings'
      description:
        type: string
      forceUpdate:
        type: boolean
      id:
        type: string
      netName:
        type: string
      policies:
        $ref: '#/definitions/model.Policies'
      tags:
        items:
          type: string
        type: array
      updated:
        type: string
      updatedBy:
        type: string
    type: object
  model.Policies:
    properties:
      onlyEndpoints:
        type: boolean
      userEndpoints:
        type: boolean
    type: object
  model.Settings:
    properties:
      address:
        items:
          type: string
        type: array
      allowedIPs:
        items:
          type: string
        type: array
      dns:
        items:
          type: string
        type: array
      enableDns:
        type: boolean
      endpoint:
        type: string
      failsafe:
        type: boolean
      hasRDP:
        type: boolean
      hasSSH:
        type: boolean
      listenPort:
        type: integer
      mtu:
        type: integer
      persistentKeepalive:
        type: integer
      postDown:
        type: string
      postUp:
        type: string
      preDown:
        type: string
      preUp:
        type: string
      presharedKey:
        type: string
      privateKey:
        type: string
      publicKey:
        type: string
      subnetRouting:
        type: boolean
      syncEndpoint:
        type: boolean
      table:
        type: string
      upnp:
        type: boolean
    type: object
  model.VPN:
    properties:
      accountid:
        type: string
      created:
        type: string
      createdBy:
        type: string
      current:
        $ref: '#/definitions/model.Settings'
      default:
        $ref: '#/definitions/model.Settings'
      deviceid:
        type: string
      devices:
        items:
          $ref: '#/definitions/model.Device'
        type: array
      enable:
        type: boolean
      failCount:
        type: integer
      failover:
        type: integer
      id:
        type: string
      name:
        type: string
      netName:
        type: string
      netid:
        type: string
      role:
        type: string
      tags:
        items:
          type: string
        type: array
      type:
        type: string
      updated:
        type: string
      updatedBy:
        type: string
    type: object
  model.VPNConfig:
    properties:
      netName:
        type: string
      netid:
        type: string
      vpns:
        items:
          $ref: '#/definitions/model.VPN'
        type: array
    type: object
host: my.nettica.com
info:
  contact: {}
  description: Nettica API documentation
  title: Nettica API
paths:
  /accounts:
    get:
      description: Read all accounts for a user
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Account'
            type: array
        "400":
          description: Bad Request
          schema: {}
      security:
      - apiKey: []
      summary: Read all accounts for a user
      tags:
      - accounts
    post:
      consumes:
      - application/json
      description: Create a new account
      parameters:
      - description: Account
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/model.Account'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Account'
        "400":
          description: Bad Request
          schema: {}
      security:
      - apiKey: []
      summary: Create a new account
      tags:
      - accounts
  /accounts/{id}:
    delete:
      description: Delete an account
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
      security:
      - apiKey: []
      summary: Delete an account
      tags:
      - accounts
    get:
      description: Read all accounts for a user
      parameters:
      - description: Account ID
        in: path
        name: id
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Account'
            type: array
        "400":
          description: Bad Request
          schema: {}
      security:
      - apiKey: []
      summary: Read all accounts for a user
      tags:
      - accounts
    patch:
      consumes:
      - application/json
      description: Update an account
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: string
      - description: Account
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/model.Account'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Account'
        "400":
          description: Bad Request
          schema: {}
      security:
      - apiKey: []
      summary: Update an account
      tags:
      - accounts
  /accounts/{id}/activate:
    post:
      description: Set an account to "active"
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Account'
        "400":
          description: Bad Request
          schema: {}
      security:
      - none: []
      summary: Activate an account
      tags:
      - accounts
  /accounts/{id}/invite:
    get:
      description: Send an email invitation to join an account
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
      security:
      - apiKey: []
      summary: Email an account invitation
      tags:
      - accounts
  /accounts/{id}/limits:
    get:
      description: Get the limits for an account
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Limits'
        "400":
          description: Bad Request
          schema: {}
      security:
      - apiKey: []
      summary: Get the limits for an account
      tags:
      - accounts
  /accounts/{id}/users:
    get:
      description: Read all users for an account
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Account'
            type: array
        "400":
          description: Bad Request
          schema: {}
      security:
      - apiKey: []
      summary: Read all users for an account
      tags:
      - accounts
  /device:
    get:
      description: Read all devices
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Device'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "422":
          description: Unprocessable Entity
          schema: {}
      security:
      - apiKey: []
      summary: Read all devices
      tags:
      - devices
    post:
      consumes:
      - application/json
      description: Create a device
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Device'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "403":
          description: Forbidden
          schema: {}
        "422":
          description: Unprocessable Entity
          schema: {}
      security:
      - apiKey: []
      summary: Create a device
      tags:
      - devices
  /device/{id}:
    delete:
      description: Delete a device
      parameters:
      - description: Device ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "403":
          description: Forbidden
          schema: {}
        "404":
          description: Not Found
          schema: {}
      security:
      - apiKey: []
      summary: Delete a device
      tags:
      - devices
    get:
      description: Read a device
      parameters:
      - description: Device ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Device'
        "400":
          description: Bad Request
          schema: {}
        "403":
          description: Forbidden
          schema: {}
      security:
      - apiKey: []
      summary: Read a device
      tags:
      - devices
    patch:
      consumes:
      - application/json
      description: Update a device
      parameters:
      - description: Device ID
        in: path
        name: id
        required: true
        type: string
      - description: Device
        in: body
        name: device
        required: true
        schema:
          $ref: '#/definitions/model.Device'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Device'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "403":
          description: Forbidden
          schema: {}
        "422":
          description: Unprocessable Entity
          schema: {}
      security:
      - apiKey: []
      summary: Update a device
      tags:
      - devices
  /device/{id}/status:
    get:
      description: Read state for a device
      parameters:
      - description: Device ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Message'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
      security:
      - apiKey: []
      summary: Read state for a device
      tags:
      - devices
  /net:
    get:
      description: Read all networks
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/model.Network'
              type: array
            type: array
        "400":
          description: Bad Request
          schema: {}
      security:
      - apiKey: []
      summary: Read all networks
      tags:
      - net
    post:
      consumes:
      - application/json
      description: Create a new network
      parameters:
      - description: Network
        in: body
        name: net
        required: true
        schema:
          $ref: '#/definitions/model.Network'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Network'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - apiKey: []
      summary: Create a new network
      tags:
      - net
  /net/{id}:
    delete:
      description: Delete a network
      parameters:
      - description: Network ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
      security:
      - apiKey: []
      summary: Delete a network
      tags:
      - net
    get:
      description: Read a network
      parameters:
      - description: Network ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Network'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - apiKey: []
      summary: Read a network
      tags:
      - net
    patch:
      consumes:
      - application/json
      description: Update a network
      parameters:
      - description: Network ID
        in: path
        name: id
        required: true
        type: string
      - description: Network
        in: body
        name: net
        required: true
        schema:
          $ref: '#/definitions/model.Network'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Network'
        "400":
          description: Bad Request
          schema: {}
      security:
      - apiKey: []
      summary: Update a network
      tags:
      - net
  /vpn:
    get:
      description: Read all VPNs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.VPN'
            type: array
      security:
      - apiKey: []
      summary: Read all VPNs
      tags:
      - vpn
    post:
      consumes:
      - application/json
      description: Create a new VPN for a device
      parameters:
      - description: VPN
        in: body
        name: vpn
        required: true
        schema:
          $ref: '#/definitions/model.VPN'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.VPN'
      security:
      - apiKey: []
      summary: Create a new VPN for a device
      tags:
      - vpn
  /vpn/{id}:
    delete:
      description: Delete a VPN
      parameters:
      - description: VPN ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - apiKey: []
      summary: Delete a VPN
      tags:
      - vpn
    get:
      description: Read a VPN
      parameters:
      - description: VPN ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.VPN'
      security:
      - apiKey: []
      summary: Read a VPN
      tags:
      - vpn
    patch:
      consumes:
      - application/json
      description: Update a VPN
      parameters:
      - description: VPN ID
        in: path
        name: id
        required: true
        type: string
      - description: VPN
        in: body
        name: vpn
        required: true
        schema:
          $ref: '#/definitions/model.VPN'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.VPN'
      security:
      - apiKey: []
      summary: Update a VPN
      tags:
      - vpn
  /vpn/{id}/config:
    get:
      description: Get VPN config
      parameters:
      - description: VPN ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/zip
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
      security:
      - apiKey: []
      summary: Get VPN config
      tags:
      - vpn
produces:
- application/json
schemes:
- https
securityDefinitions:
  apiKey:
    in: header
    name: X-API-KEY
    type: apiKey
swagger: "2.0"
